name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Run tests
      run: cargo test

  release:
    name: Release
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: resize-rs-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: resize-rs-windows-x64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare asset (Unix)
      if: runner.os != 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/resize-rs ${{ matrix.asset_name }}
        strip ${{ matrix.asset_name }}

    - name: Prepare asset (Windows)
      if: runner.os == 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/resize-rs.exe ${{ matrix.asset_name }}

    - name: Upload release asset
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

    - name: Create Release
      if: matrix.os == 'ubuntu-latest'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.asset_name }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

